grammar my_grammar;
s : script EOF;
script : stmt SEMI | stmt SEMI script *;
stmt : KW_CONNECT KW_TO STRING | lst | select_stmt | named_pattern_stmt | KW_WRITE select_stmt KW_TO STRING ;
lst: KW_LIST KW_ALL KW_GRAPHS | KW_LIST KW_ALL KW_GRAPHS KW_FROM STRING ;
named_pattern_stmt : NT_NAME OP_EQ pattern;
select_stmt : KW_SELECT obj_expr KW_FROM STRING KW_WHERE where_expr;
obj_expr : vs_info | KW_COUNT vs_info | KW_EXISTS vs_info;
vs_info : LBR IDENT COMMA IDENT RBR | LBR IDENT RBR ;
where_expr : LBR v_expr RBR OP_MINUS pattern OP_MINUS OP_GR LBR v_expr RBR;
v_expr : IDENT | UNDERSCORE | IDENT DOT KW_ID OP_EQ INT ;
pattern : alt_elem | alt_elem MID pattern ;
alt_elem : seq | LBR RBR ;
seq : seq_elem | seq_elem seq ;
seq_elem : prim_pattern | prim_pattern OP_STAR | prim_pattern OP_PLUS | prim_pattern OP_Q ;
prim_pattern : NT_NAME | LBR pattern RBR | IDENT  ;

WS  :   [ \t\r\n]+ -> skip ;
SEMI : ';';
KW_CONNECT : 'CONNECT';
KW_TO : 'TO';
STRING : '['([a-z] | [A-Z] | [0-9] | ('-' | '_' | '/' | '.'))* ']';
KW_LIST : 'LIST';
KW_ALL : 'ALL';
KW_GRAPHS : 'GRAPHS';
NT_NAME : [A-Z][a-z]*;
OP_EQ : '=';
KW_WRITE : 'WRITE';
KW_SELECT : 'SELECT';
KW_FROM : 'FROM';
KW_WHERE : 'WHERE';
KW_COUNT : 'COUNT';
KW_EXISTS : 'EXISTS';
KW_DEGREE : 'DEGREE';
KW_DISTANCE : 'DISTANCE';
KW_COUNT_ISOLATED : 'COUNTISOLATED';
LBR : '(';
RBR : ')';
IDENT : [a-z][a-z]*;
COMMA : ',';
OP_MINUS : '-';
OP_GR : '>';
UNDERSCORE : '_';
DOT : '.';
KW_ID : 'ID';
INT : [0] | [1-9][0-9]*;
MID : '|';
OP_STAR : '*';
OP_PLUS : '+';
OP_Q : '?';